/*
 * NOTICE
 * This software was produced for the U.S. Government and is subject to the
 * Rights in Data-General Clause 5.227-14 (May 2014).
 * Copyright 2018 The MITRE Corporation. All rights reserved.
 * Approved for Public Release; Distribution Unlimited. Case 18-2165
 *
 * This project contains content developed by The MITRE Corporation.
 * If this code is used in a deployment or embedded within another project,
 * it is requested that you send an email to opensource@mitre.org
 * in order to let us know where this software is being used.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#!/usr/bin/env node

var mongoose = require('mongoose');
var Promise = require('bluebird');

var elastic = require('../../utils/elasticSearch');
var log = require('../../utils/logger').logger;

var glossaryMap = {};

var testElasticConnection = function () {
	return elastic.ping()
	.then( function () {
		log.info('ElasticSearch connection established...');
	})
	.catch( function (err) {
		log.error('Failed to establish ElasticSearch Connection');
		process.exit(0);
	});
};

var reindexGlossary = function (gloss) {
	glossaryMap[gloss._id.toString()] = true;

	if (gloss.entries.length < 1) {
		log.info(`Skipping Glossary ${gloss._id} because it contains no entries`);
		return Promise.resolve(true);
	}

	log.info(`Reindexing Glossary ${gloss._id}...`);

	return elastic.deleteGlossaryIndex(gloss._id)
	.catch( function (err) {
		log.warn('Index did not previously exist');
		if (err.body.error.reason == 'no such index') {

			return true;
		}

		throw err;
	})
	.then( function () {
		return Promise.mapSeries(gloss.entries, function (entry) {
			return elastic.indexEntry(entry, gloss._id);
		})
	})
	.then( function () {
		log.verbose(`Re-indexed ${gloss.entries.length} entries from Glossary ${gloss._id}`);
	});
};


// Initialize mongo/mongoose connection and models
var db = require('../../db').init({performCheck: false})
.then( function () {
	// initialize elastic connection
	return testElasticConnection();
})
.then( function () {
    var Glossary = mongoose.model('Glossary');

    // Get all Glossary Docs with entries references populated
    return Glossary.find({}).populate([
        {
            path: 'entries',
            model: 'Entry'
            // no need to populate Terms, the Elastic util/interface does that for us
        }
    ]).exec()
        .then(function (glossaryDocs) {
            return Promise.mapSeries(glossaryDocs, reindexGlossary);
        })
        .then(function () {
            // query elastic for all indices
            elastic.getIndices()
			.then(function (indices) {
				return Promise.mapSeries(Object.keys(indices), function (indexName) {
                    if (indexName.includes("kt_")) {
                        indexName = indexName.slice(3);
                        if (!(indexName in glossaryMap)) {
                            //var temp = index.split("_")[1];
                            return elastic.deleteGlossaryIndex(indexName);
                        }
                    }
                });
			});
            // .then => iterate over the list and check if the glossary exists in the glossaryMap
            // if ( ! (id in glossaryMap) ) {}
            //		if not, delete the index
        })
})
.catch( function (err) {
	console.log(err);
	process.exit(0);
})
.then( function (gloss) {
	log.info('Re-indexing completed.');
	mongoose.disconnect();
});
