#!/usr/bin/env node

var mongoose = require('mongoose');
var Promise = require('bluebird');
var readline = require('readline');
var config = require('../../../config').commonGlossary;

var rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});

var prompt = function (_prompt) {
	return new Promise( function (resolve, reject) {
		rl.question(_prompt, resolve);
	});
};

var exit = function () {
	rl.close();
	mongoose.disconnect();
	process.exit();
};

var db = require('../../db').init({performCheck: false})
.then( function () {

	var gloss = {
		isAdmin: true
	};

	console.log('Initializing KeyTerms...');
	console.log('Creating common glossary...');
	if(!!config.name && !!config.abbreviation && !!config.description) {
		gloss.name = config.name;
		gloss.abbreviation = config.abbreviation;
		gloss.description = config.description;
		gloss.isCommon = true;
		return mongoose.model('Glossary').create(gloss);
	} else {
		console.log('Missing config setting(s) for common glossary');
		throw new Error('Common glossary not configured');
	}

}).then( function (gloss) {

	var admin = {
		isAdmin: true
	};

	console.log('Creating initial admin user...');
	return prompt('Enter your full name: ')
	.then( function (ans) {
		admin.fullName = ans;
		return prompt('Enter your email. This will also be your username: ')
	})
	.then( function (ans) {
		admin.username = ans;
		admin.email = ans;
		return prompt('Create your password: ')
	})
	.then( function (ans) {
		admin.password = ans;
		return true;
	}).then( function () {
		console.log('Adding admin user to common glossary...');
		admin.glossaries = [];
		admin.glossaries.push(gloss._id);
		admin.currentGlossary = gloss._id;
		return admin;
	}).then( function (admin) {
            return mongoose.model('User').create(admin);
	}).then( function (user) {
            gloss.qcs.push(user._id);
            gloss.admins.push(user._id);
            return gloss.save();
	}).then( function (savedGlossary) {
		console.log('Initialization completed successfully.');
	});

}).catch( function (err) {
	console.log('Error during initialization. Please check config settings, then run this script again.');
}).finally( function () {
	exit();
});
