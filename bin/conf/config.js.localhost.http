var CONSTANTS = require('constants');

try {
	var _config = require('../config');
}
catch (e) {
	_config = null;
}

var config = {};

// Server configurations
config.server = {
	useHTTPS: false,
	cookieExpiration: 1000 * 60 * 60 * 24,		// one day in milliseconds
	sessionSecret: 'shhh dont tell anyone',
	location: 'myServerLocation:myPort',	// the location of the server where this instance of
												//   KeyTerms is being deployed, including port number
												//   (e.g. 'localhost:8081')
	prod: {
		http: 5000,
		https: 5443,
		// NOTE: Make sure to use the correct protocol (http or https), and include port
		allowedCorsDomains: ['http://localhost:8080', 'http://localhost:8081', 'http://myServerLocation:8080', 'http://myServerLocation:8081', 'http://myServerLocation:5000']
	},
	dev: {
		http: 4000,
		https: 4443,
		// NOTE: Make sure to use the correct protocol (http or https), and include port
		allowedCorsDomains: ['http://localhost:8080', 'http://localhost:8081', 'http://myServerLocation:8080', 'http://myServerLocation:8081', 'http://myServerLocation:4000']
	},
	SSLCerts: {
		key: __dirname+ '/certs/default.key',
		cert: __dirname+ '/certs/default.crt',
		ca: [__dirname+ '/certs/ca/ca.cert.pem']
	},
	TLSOptions: {
		requestCert: true,
		rejectUnauthorized: true,
		secureProtocol: 'TLSv1_2_method',
		secureOptions: CONSTANTS.SSL_OP_NO_SSLv3 || CONSTANTS.SSL_OP_NO_SSLv2 ||
			CONSTANTS.SSL_OP_NO_TLSv1 || CONSTANTS.SSL_OP_NO_TLSv1_1,
		ciphers: 'ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:HIGH:!RC4:!MD5:!aNULL:!EDH',
		honorCipherOrder: true
	}
};

// Common (default) Organization configuration
config.commonOrg = {
	name: 'Default Glossary',
	abbreviation: 'gloss',
	description: 'Glossary that all users belong to by default'
}

// Logging configurations

// Winston log levels via winston documentation:
// error=0, warn=1, info=2, verbose=3, debug=4, silly=5

config.enableLogFile = true;
config.logSetup = {
	name: 'console-log',
	level: (process.env.NODE_ENV && process.env.NODE_ENV.match(/prod/i)) ? 'verbose' : 'silly',
	json: false,
	colorize: true,
	prettyPrint: true,
	handleExceptions: false
};
config.logFileSetup = {
	name: 'file-log',
	level: (process.env.NODE_ENV && process.env.NODE_ENV.match(/prod/i)) ? 'verbose' : 'silly',
	json: false,
	colorize: false,
	prettyPrint: true,
	handleExceptions: true,
	filename: './logs/daily-log',
	datePattern: '-yyyy-MM-dd.log'
};


// Database (Mongo) configurations
// OldDb = 'KeyTerms'
config.db = {
	host: 'localhost',
	port: 27017,
	db: 'KeyTerms',
	secured: false,		// set to true if Mongo instance is username/password protected
	user: '',
	pass: ''
};

// NLP Services configurations
config.nlp = {
	// base url for the NLP Services server
	url: 'http://localhost:8080/NLPServices/TextServices',

	// if false, http is used rather than https
	useHTTPS: false,

	// these are the certs for NLP Services, only used if useHTTPS=true
	certs: config.server.SSLCerts			// by default, we re-use the same certs the KeyTerms API is served with

	// uncomment this to include specific certs for NLP
	// certs: {
	// 	key: __dirname+ '/certs/key.pem',
	// 	cert: __dirname+ '/certs/cert.pem',
	// 	ca: [__dirname+ '/certs/ca.pem']
	// }

};

// ElasticSearch configurations
config.elastic = {
	host: 'localhost',
	port: 9200,
	protocol: 'http'
};

config.tempDirectory = 'tmp';


module.exports = (_config != null) ? _config : config;
